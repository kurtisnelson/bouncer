FORMAT: 1A
HOST: https://bouncer-api.monsieur.co

# Bouncer
Bouncer registers users and manages OAuth tokens.

# Group User

## Users Collection [/users]

### Create a user [POST]

Register a new user

+ Request (application/json)

   + Body

          {
            "users": {
              "email": "kurt@example.com",
              "password": "12345678",
              "password_confirmation": "12345678"
            }
          }

+ Response 200

   + Body

          {
            "users": {
              "id": "uuid",
              "email": "kurt@example.com"
            }
          }

## Reset Password [/users/reset]

### Reset Password [POST]

Reset a user's password

+ Request (application/json)

    + Body

          {
             "email": "kurt@example.com"
          }

+ Response 204

## Confirmation [/users/{id}/confirm]

### Confirm phone or email [GET]

Takes in either a phone or an email verification token. If the requester is a mobile browser, it redirects to bouncer://users/id upon success.

+ Parameters
    + confirmation_token = `abcd` (required , string) ... token

+ Response 201
+ Response 200

### Resend phone and/or email confirmation [PUT]

Resets any pending confirmation tokens and re-sends notifications

# Group Token

## Token resource [/oauth/token]
This endpoint provides token operations

### Exchange credentials for token [POST]

Scope is an optional field, `user` and `device` are valid. Password is the most common grant type. Either email or phone is required.

+ Request (application/json)

    + Headers

            Accepts: application/json

    + Body

            {
                "grant_type": "password | assertion | refresh_token",
                "scope": "user",
                "email": "kurt@example.com",
                "phone": "4048675309",
                "password": "password",
                "assertion": "facebook token",
                "refresh_token": "refresh token"
            }

+ Response 200

    + Body

            {
                "access_token": "hex",
                "token_type": "bearer",
                "expires_in": 7200,
                "refresh_token": "hex",
                "scope": "user",
                "created_at": 1423841405
            }

# Group Device

## Device [/device/{id}]

+ Parameters
    + id (string) ... UUID of the device

+ Model (application/vnd.api+json)

    + Body

                {"devices": [
                    {
                        "id":"01b6beb7-41f0-40f3-86ee-233a1d8b000e",
                        "serial": "0000-000000-0000,
                        "links": {
                            "user":"e4569f9a-f2b8-4875-a093-e87a329fbb15",
                        }
                    }
                ]}

### Retrieve a Device [GET]

+ Response 200

    [Device][]

## Device Claim [/device/{id}/claim]

Mark a device as managed by the current user token.

### Claim a device [PUT]

+ Response 200

Claim succeeded

+ Response 403

Forbidden, device doesn't exist or is claimed by other user

+ Response 400

Current user already has claim

## Device Unclaim [/device/{id}/unclaim]

Unmark a device as managed.

### Unclaim a device [PUT]

+ Response 200

## Devices Claim [/devices/claim]

+ Parameters
    + serial (required , string) ... Serial of device

Mark a device as managed by the current user token.

### Claim a device [PUT]

+ Response 200

Claim succeeded

+ Response 403

Forbidden, device doesn't exist or is claimed by other user

+ Response 400

Current user already has claim

## Devices Unclaim

+ Parameters
    + serial (require , string) ... Serial of device

Mark a device as no longer in service to current user

### Unclaim a device [PUT]

+ Response 200

Unclaim succeeded

+ Response 403

Current user does not own claim

## Devices Collection [/devices]

### Create device [POST]

+ Request (application/json)

    + Headers

            Accepts: application/json
            Authorization: Bearer 3391f99c344af714903d69db38acf0f9a90383b4b251c6e9b84a580f53362e4f

    + Body

            {
                "devices": [
                    {
                        "serial": "unique serial"
                    }
                ]
            }

+ Response 200

    + Body

            {
                "devices": [{
                    "id": "da6e4208-5509-475b-addb-6e0128d63279",
                    "serial": "uniquestuff",
                    "created_at": "2015-02-13T16:07:08.127Z",
                    "links": {
                        "user": "ed2aab70-d231-492b-b6a8-b27f2ed51769",
                        "device_token": 3
                    }
                }],
                "linked": {
                    "device_tokens": [
                        {
                            "resource_owner_id": "da6e4208-5509-475b-addb-6e0128d63279",
                            "refresh_token": "23f4b88f72faf54e3b1f5a189cc6d4d035f9abf0bde17a7f8a77ccae2ed92619",
                            "expires_in_seconds": 86400,
                            "access_token": "4929a92b064252a4dae902bbef23284d4b564af1592eb208beb67cada4826b10"
                        }
                    ]
                }
            }

+ Response 403
+ Response 400
